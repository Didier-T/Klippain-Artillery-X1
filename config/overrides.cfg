############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 




#[mcu adxl]
# Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
#serial: /dev/serial/by-id/usb-Klipper_rp2040_E66160F4232F1338-if00
# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "bed_soak", "z_offset", "tilt_calib", "bedmesh", "extruder_heating", "primeline"
gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine

[include timelapse.cfg]

[extruder]
control = pid
#pid_kp = 17.482
#pid_ki = 0.857
#pid_kd = 89.158

[heater_bed]
control = pid
#pid_kp = 34.502
#pid_ki = 0.293
#pid_kd = 1015.659
#pid_kp = 48.362
#pid_ki = 0.638
#pid_kd = 915.854


#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_x]
microsteps: 16
## ajustement de la distance par rotation
# ( m / d) * c = n
# d = distance souhaitée
# m = distance mesurée
# c = rotation_distance actuelle
# n = rotation_distance calibré
#rotation_distance: 39.962
rotation_distance: 39.88
endstop_pin: ^!X_STOP
position_endstop: -5
position_min : -5
position_max: 305
homing_speed: 40.0

[stepper_y]
microsteps: 16
## ajustement de la distance par rotation
# ( m / d) * c = n
# d = distance souhaitée
# m = distance mesurée
# c = rotation_distance actuelle
# n = rotation_distance calibré
#rotation_distance: 39.977
rotation_distance: 39.64
endstop_pin: ^!Y_STOP
position_endstop: -5
position_min : -5
position_max: 305
homing_speed: 40
homing_positive_dir: false

[stepper_z]
step_pin: Z_STEP
dir_pin: !Z_DIR
enable_pin: !Z_ENABLE
microsteps: 16
## ajustement de la distance par rotation
# ( m / d) * c = n
# d = distance souhaitée
# m = distance mesurée
# c = rotation_distance actuelle
# n = rotation_distance calibré
### indiquer la même valeur en z1
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_min: -3
position_max: 385
homing_speed: 10
second_homing_speed: 1

[stepper_z1]
step_pin: Z1_STEP
dir_pin: !Z1_DIR
enable_pin: !Z1_ENABLE
microsteps: 16
rotation_distance: 8

[gcode_macro _USER_VARIABLES]
variable_extruder_enabled: True
gcode:

[extruder]
step_pin: E_STEP
dir_pin: E_DIR
enable_pin: !E_ENABLE
microsteps: 16

## Marquez votre filament à 120 mm au-dessus de l'entrée de votre extrudeuse.
# Chauffer la buse à la température d'impression souhaitée
# G90
# G1 z50
# G92 E0
# G1 E100 F60
# Mesurez maintenant la distance entre l'entrée de votre extrudeuse et la marque sur votre filament.
# c = rotation_distance actuelle 
# m = filament restant mesuré
# d = mm souhaité
# n = nouvelle rotation_distance
# ((d - m) / d) * c = n

rotation_distance: 6.985
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: E_HEATER
sensor_type: EPCOS 100K B57560G104F
sensor_pin: E_TEMPERATURE
min_extrude_temp: 160
min_temp: 5
max_temp: 270
max_extrude_only_distance: 500
max_extrude_cross_section: 50

[heater_bed]
max_power: 0.75
min_temp: 5
max_temp: 120

#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
#[probe]
#z_offset = 2.984

[probe]
# lien vers le support touch-mi utilisé https://www.thingiverse.com/thing:3624679
pin: ^PROBE_INPUT
x_offset: -42.5 # A modifier selon le decalage de son support en X
y_offset: -31.5 # A modifier selon le decalage de son support en Y
speed: 3.0
samples: 1
samples_result: average
#activate_gcode:
#  activate_probe
#deactivate_gcode:
#  desactivate_probe

#[safe_z_home]
#home_xy_position: 191,181 # A modifier pour effectuer le Z home au centre du plateau
#speed: 50
#z_hop: 10                 # Move up 10mm
#z_hop_speed: 5

[z_tilt]
z_positions: 
     -25,150
     335,150

points: 
    78,181
    305,181
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.01


[bed_mesh]
speed: 150
horizontal_move_z: 10
mesh_min: 37.5,26.5 # x_min - decalage sonde en X , y_min - decalage sonde en Y
mesh_max: 262.5,273.5 # x_max + decalage sonde en X , y_max + decalage sonde en Y
probe_count: 9,9
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 3.0
split_delta_z: .010
fade_start: 1.0 
fade_end: 10.0
fade_target: 0
zero_reference_position: 191,181

#[input_shaper]
#shaper_freq_x = 55.2
#shaper_type_x = mzv
#shaper_type_y = 2hump_ei
#shaper_freq_y = 49.4

#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BASE_BED_MESH_CALIBRATE
#gcode:
#  _CG28
#  G1 X-5 F3000
#  BASE_BED_MESH_CALIBRATE
#  DEACTIVATE_PROBE
  
#[gcode_macro Z_TILT_ADJUST]
#rename_existing: BASE_Z_TILT_ADJUST
#gcode:
#  _CG28
#  G1 X-5 F3000
#  BASE_Z_TILT_ADJUST
#  DEACTIVATE_PROBE

[gcode_macro DEACTIVATE_PROBE]
gcode:
  G1 Z0.1 F3000
  G1 Z10 F3000

[gcode_macro ACTIVATE_PROBE]
gcode:
  G1 X-5 F3000

[gcode_macro _EXIT_POINT]
gcode:

[gcode_macro _ENTRY_POINT]
gcode:

[gcode_macro _CHECK_PROBE]
gcode:

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
    
[gcode_macro _USER_VARIABLES]
variable_probe_type_enabled: "dockable_virtual"
variable_bed_mesh_profile: "default"
gcode: